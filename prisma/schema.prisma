// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid()) @map("id")
  email        String    @unique @map("email")
  password     String    @map("password")
  username     String    @unique @map("username") @db.VarChar(32)
  name         String    @map("name") @db.VarChar(48)
  bio          String?   @map("bio") @db.VarChar(512)
  profileImg   String?   @map("profile_img")
  profileImgId String?   @map("profile_img_id")
  role         Role      @default(USER) @map("role")
  lastLogin    DateTime? @map("last_login") @db.Timestamptz()
  bannedUntil  DateTime? @map("banned_until") @db.Timestamptz

  posts    Post[]
  comments Comment[]

  following UserFollows[] @relation("Following")
  followers UserFollows[] @relation("Followers")

  postLikes    PostLike[]
  commentLikes CommentLike[]

  @@map("users")
}

model Post {
  id        Int      @id @default(autoincrement()) @map("id")
  caption   String   @map("caption") @db.VarChar(2048)
  imageUrl  String?  @map("image_url")
  imageId   String?  @map("image_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at")

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @map("author_id")

  comments Comment[]
  likes    PostLike[]

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement()) @map("id")
  message   String   @map("message") @db.VarChar(2048)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @map("author_id")

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int  @map("post_id")

  likes CommentLike[]

  @@map("comments")
}

model UserFollows {
  followerId  String
  followingId String

  follower  User @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@map("user_follows")
}

model PostLike {
  userId String
  postId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@map("post_likes")
}

model CommentLike {
  userId    String
  commentId Int

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
  @@map("comment_likes")
}

enum Role {
  USER
  ADMIN
}
